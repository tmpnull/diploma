{
    "openapi": "3.0.0",
    "info": {
        "title": "Swagger laravel",
        "description": "This is laravel project",
        "contact": {
            "email": "kornevdima@gmail.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/audiences": {
            "get": {
                "tags": [
                    "audiences"
                ],
                "summary": "list audiences",
                "operationId": "getBuildings",
                "responses": {
                    "200": {
                        "description": "A list with audiences",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Audience"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "audiences"
                ],
                "summary": "Add audience",
                "operationId": "saveAudience",
                "requestBody": {
                    "description": "add audience",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Audience"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Audience"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/audiences/{audienceId}": {
            "get": {
                "tags": [
                    "audiences"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getAudienceById",
                "parameters": [
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "ID of audience that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Audience"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "audiences"
                ],
                "summary": "Update an existing audience",
                "operationId": "updateAudience",
                "parameters": [
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "ID of audience to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add audience",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Audience"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Audience not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "audiences"
                ],
                "summary": "Delete audience by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteAudience",
                "parameters": [
                    {
                        "name": "audienceId",
                        "in": "path",
                        "description": "ID of the audience that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/buildings": {
            "get": {
                "tags": [
                    "buildings"
                ],
                "summary": "list buildings",
                "operationId": "getBuildings",
                "responses": {
                    "200": {
                        "description": "A list with buildings",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Building"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "buildings"
                ],
                "summary": "Add building",
                "operationId": "saveBuilding",
                "requestBody": {
                    "description": "add building",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Building"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Building"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/buildings/{buildingId}": {
            "get": {
                "tags": [
                    "buildings"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getBuildingById",
                "parameters": [
                    {
                        "name": "buildingId",
                        "in": "path",
                        "description": "ID of building that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Building"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "buildings"
                ],
                "summary": "Update an existing building",
                "operationId": "updateBuilding",
                "parameters": [
                    {
                        "name": "buildingId",
                        "in": "path",
                        "description": "ID of building to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add building",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Building"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Building not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "buildings"
                ],
                "summary": "Delete building by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteBuilding",
                "parameters": [
                    {
                        "name": "buildingId",
                        "in": "path",
                        "description": "ID of the building that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/configurations": {
            "get": {
                "tags": [
                    "configurations"
                ],
                "summary": "list configurations",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with configurations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Configuration"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "configurations"
                ],
                "summary": "Add configuration",
                "operationId": "saveConfiguration",
                "requestBody": {
                    "description": "add configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Configuration"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Configuration"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/configurations/{configurationId}": {
            "get": {
                "tags": [
                    "configurations"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getConfigurationById",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "ID of configuration that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Configuration"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "configurations"
                ],
                "summary": "Update an existing configuration",
                "operationId": "updateConfiguration",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "ID of configuration to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add configuration",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Configuration"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Configuration not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "configurations"
                ],
                "summary": "Delete configuration by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteConfiguration",
                "parameters": [
                    {
                        "name": "configurationId",
                        "in": "path",
                        "description": "ID of the configuration that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/courses": {
            "get": {
                "tags": [
                    "courses"
                ],
                "summary": "list courses",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with courses",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Course"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "courses"
                ],
                "summary": "Add course",
                "operationId": "saveCourse",
                "requestBody": {
                    "description": "add course",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Course"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/courses/{courseId}": {
            "get": {
                "tags": [
                    "courses"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getCourseById",
                "parameters": [
                    {
                        "name": "courseId",
                        "in": "path",
                        "description": "ID of course that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "courses"
                ],
                "summary": "Update an existing course",
                "operationId": "updateCourse",
                "parameters": [
                    {
                        "name": "courseId",
                        "in": "path",
                        "description": "ID of course to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add course",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Course"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Course not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "courses"
                ],
                "summary": "Delete course by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteCourse",
                "parameters": [
                    {
                        "name": "courseId",
                        "in": "path",
                        "description": "ID of the course that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/degrees": {
            "get": {
                "tags": [
                    "degrees"
                ],
                "summary": "list degrees",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with degrees",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Degree"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "degrees"
                ],
                "summary": "Add degree",
                "operationId": "saveDegree",
                "requestBody": {
                    "description": "add degree",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Degree"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Degree"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/degrees/{degreeId}": {
            "get": {
                "tags": [
                    "degrees"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getDegreeById",
                "parameters": [
                    {
                        "name": "degreeId",
                        "in": "path",
                        "description": "ID of degree that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Degree"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "degrees"
                ],
                "summary": "Update an existing degree",
                "operationId": "updateDegree",
                "parameters": [
                    {
                        "name": "degreeId",
                        "in": "path",
                        "description": "ID of degree to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add degree",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Degree"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Degree not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "degrees"
                ],
                "summary": "Delete degree by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteDegree",
                "parameters": [
                    {
                        "name": "degreeId",
                        "in": "path",
                        "description": "ID of the degree that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/departments": {
            "get": {
                "tags": [
                    "departments"
                ],
                "summary": "list departments",
                "operationId": "getDepartments",
                "responses": {
                    "200": {
                        "description": "A list with departments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Department"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "departments"
                ],
                "summary": "Add department",
                "operationId": "saveDepartment",
                "requestBody": {
                    "description": "add department",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Department"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/departments/{departmentId}": {
            "get": {
                "tags": [
                    "departments"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getDepartmentById",
                "parameters": [
                    {
                        "name": "departmentId",
                        "in": "path",
                        "description": "ID of department that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Department"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "departments"
                ],
                "summary": "Update an existing department",
                "operationId": "updateDepartment",
                "parameters": [
                    {
                        "name": "departmentId",
                        "in": "path",
                        "description": "ID of department to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add department",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Department"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Department not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "departments"
                ],
                "summary": "Delete department by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteDepartment",
                "parameters": [
                    {
                        "name": "departmentId",
                        "in": "path",
                        "description": "ID of the department that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/faculties": {
            "get": {
                "tags": [
                    "faculties"
                ],
                "summary": "list faculties",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with faculties",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Faculty"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "faculties"
                ],
                "summary": "Add faculty",
                "operationId": "saveFaculty",
                "requestBody": {
                    "description": "add faculty",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Faculty"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Faculty"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/faculties/{facultyId}": {
            "get": {
                "tags": [
                    "faculties"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getFacultyById",
                "parameters": [
                    {
                        "name": "facultyId",
                        "in": "path",
                        "description": "ID of faculty that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Faculty"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "faculties"
                ],
                "summary": "Update an existing faculty",
                "operationId": "updateFaculty",
                "parameters": [
                    {
                        "name": "facultyId",
                        "in": "path",
                        "description": "ID of faculty to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add faculty",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Faculty"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Faculty not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "faculties"
                ],
                "summary": "Delete faculty by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteFaculty",
                "parameters": [
                    {
                        "name": "facultyId",
                        "in": "path",
                        "description": "ID of the faculty that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/files": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "list files",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with files",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/File"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "files"
                ],
                "summary": "Add file",
                "operationId": "saveFile",
                "requestBody": {
                    "description": "add file",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/files/{fileId}": {
            "get": {
                "tags": [
                    "files"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getFileById",
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "ID of file that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "files"
                ],
                "summary": "Update an existing file",
                "operationId": "updateFile",
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "ID of file to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add file",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/File"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "File not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "files"
                ],
                "summary": "Delete file by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteFile",
                "parameters": [
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "ID of the file that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/groups": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "list groups",
                "operationId": "getGroups",
                "responses": {
                    "200": {
                        "description": "A list with groups",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Add group",
                "operationId": "saveGroup",
                "requestBody": {
                    "description": "add group",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/groups/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getGroupById",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "ID of group that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing group",
                "operationId": "updateGroup",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "ID of group to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add group",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Group"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "group not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Delete group by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteGroup",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "ID of the group that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/positions": {
            "get": {
                "tags": [
                    "positions"
                ],
                "summary": "list positions",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with positions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Position"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "positions"
                ],
                "summary": "Add position",
                "operationId": "savePosition",
                "requestBody": {
                    "description": "add position",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Position"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Position"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/positions/{positionId}": {
            "get": {
                "tags": [
                    "positions"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getPositionById",
                "parameters": [
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "ID of position that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Position"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "positions"
                ],
                "summary": "Update an existing position",
                "operationId": "updatePosition",
                "parameters": [
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "ID of position to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add position",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Position"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Position not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "positions"
                ],
                "summary": "Delete position by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deletePosition",
                "parameters": [
                    {
                        "name": "positionId",
                        "in": "path",
                        "description": "ID of the position that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/roles": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "list roles",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with roles",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Role"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "roles"
                ],
                "summary": "Add role",
                "operationId": "saveRole",
                "requestBody": {
                    "description": "add role",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/roles/{roleId}": {
            "get": {
                "tags": [
                    "roles"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getRoleById",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "ID of role that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "roles"
                ],
                "summary": "Update an existing role",
                "operationId": "updateRole",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "ID of role to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add role",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Role"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Role not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "roles"
                ],
                "summary": "Delete role by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteRole",
                "parameters": [
                    {
                        "name": "roleId",
                        "in": "path",
                        "description": "ID of the role that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/specialities": {
            "get": {
                "tags": [
                    "specialities"
                ],
                "summary": "list specialities",
                "operationId": "getSpecialities",
                "responses": {
                    "200": {
                        "description": "A list with specialities",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Speciality"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "specialities"
                ],
                "summary": "Add speciality",
                "operationId": "saveSpeciality",
                "requestBody": {
                    "description": "add speciality",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Speciality"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Speciality"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/specialities/{specialityId}": {
            "get": {
                "tags": [
                    "specialities"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getSpecialityById",
                "parameters": [
                    {
                        "name": "specialityId",
                        "in": "path",
                        "description": "ID of speciality that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Speciality"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "specialities"
                ],
                "summary": "Update an existing speciality",
                "operationId": "updateSpeciality",
                "parameters": [
                    {
                        "name": "specialityId",
                        "in": "path",
                        "description": "ID of speciality to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add speciality",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Speciality"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Speciality not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "specialities"
                ],
                "summary": "Delete speciality by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteSpeciality",
                "parameters": [
                    {
                        "name": "specialityId",
                        "in": "path",
                        "description": "ID of the speciality that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/students": {
            "get": {
                "tags": [
                    "students"
                ],
                "summary": "list students",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with students",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Student"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "students"
                ],
                "summary": "Add student",
                "operationId": "saveStudent",
                "requestBody": {
                    "description": "add student",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Student"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Student"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/students/{studentId}": {
            "get": {
                "tags": [
                    "students"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getStudentById",
                "parameters": [
                    {
                        "name": "studentId",
                        "in": "path",
                        "description": "ID of student that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Student"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "students"
                ],
                "summary": "Update an existing student",
                "operationId": "updateStudent",
                "parameters": [
                    {
                        "name": "studentId",
                        "in": "path",
                        "description": "ID of student to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add student",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Student"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Student not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "students"
                ],
                "summary": "Delete student by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteStudent",
                "parameters": [
                    {
                        "name": "studentId",
                        "in": "path",
                        "description": "ID of the student that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/teachers": {
            "get": {
                "tags": [
                    "teachers"
                ],
                "summary": "list teachers",
                "operationId": "getFaculties",
                "responses": {
                    "200": {
                        "description": "A list with teachers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Teacher"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "teachers"
                ],
                "summary": "Add teacher",
                "operationId": "saveTeacher",
                "requestBody": {
                    "description": "add teacher",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Teacher"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Teacher"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "wrong data passed"
                    }
                }
            }
        },
        "/api/teachers/{teacherId}": {
            "get": {
                "tags": [
                    "teachers"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getTeacherById",
                "parameters": [
                    {
                        "name": "teacherId",
                        "in": "path",
                        "description": "ID of teacher that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Teacher"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "teachers"
                ],
                "summary": "Update an existing teacher",
                "operationId": "updateTeacher",
                "parameters": [
                    {
                        "name": "teacherId",
                        "in": "path",
                        "description": "ID of teacher to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add teacher",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Teacher"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Teacher not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "teachers"
                ],
                "summary": "Delete teacher by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteTeacher",
                "parameters": [
                    {
                        "name": "teacherId",
                        "in": "path",
                        "description": "ID of the teacher that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/timetables": {
            "get": {
                "tags": [
                    "timetables"
                ],
                "summary": "list timetables",
                "operationId": "getTimetables",
                "responses": {
                    "200": {
                        "description": "A list with timetables",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Timetable"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "timetables"
                ],
                "summary": "Add new course to the timetable",
                "operationId": "saveTimetable",
                "requestBody": {
                    "description": "add user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Timetable"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timetable"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/timetables/{userId}": {
            "get": {
                "tags": [
                    "timetables"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getTimetableById",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of timetable that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timetable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "timetables"
                ],
                "summary": "Update an existing user",
                "operationId": "updateTimetable",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Timetable"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Timetable not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "timetables"
                ],
                "summary": "Delete user by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteTimetable",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of the user that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/timetables/group/{groupId}": {
            "get": {
                "tags": [
                    "timetables"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getTimetableByGroupId",
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "ID of group that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "period",
                        "in": "query",
                        "description": "ID of pet that needs to be fetched",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dividend",
                        "in": "query",
                        "description": "Set period of time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "day",
                        "in": "query",
                        "description": "Set filter for required date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Set filter for required date",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timetable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/timetables/teacher/{teacherId}": {
            "get": {
                "tags": [
                    "timetables"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getTimetableByTeacherId",
                "parameters": [
                    {
                        "name": "teacherId",
                        "in": "path",
                        "description": "ID of teacher that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    },
                    {
                        "name": "period",
                        "in": "query",
                        "description": "ID of pet that needs to be fetched",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dividend",
                        "in": "query",
                        "description": "Set period of time",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "day",
                        "in": "query",
                        "description": "Set filter for required date",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "description": "Set filter for required date",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timetable"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "list users",
                "operationId": "getUsers",
                "responses": {
                    "200": {
                        "description": "A list with users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Add user",
                "operationId": "saveUser",
                "requestBody": {
                    "description": "add user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/users/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Display the specified resource.",
                "description": ">-\n    For valid response try integer IDs with value >= 1 \\ Other\n    values will generated exceptions",
                "operationId": "getUserById",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user that needs to be fetched",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing user",
                "operationId": "updateUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user to update",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "description": "add user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/User"
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Delete user by ID",
                "description": ">-\n    For valid response try integer IDs with positive integer value.\\ \\\n    Negative or non-integer values will generate API errors",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of the user that needs to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64",
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Audience": {
                "title": "Audience",
                "description": "Audience",
                "required": [
                    "name",
                    "buildingId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the audience",
                        "type": "string"
                    },
                    "building_id": {
                        "description": "Building to which this audience belongs",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Building": {
                "title": "Building",
                "description": "Building",
                "required": [
                    "name",
                    "abbreviation"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the building",
                        "type": "string"
                    },
                    "abbreviation": {
                        "description": "Abbreviation of the building",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Configuration": {
                "title": "Configuration",
                "description": "Configuration",
                "required": [
                    "key"
                ],
                "properties": {
                    "key": {
                        "description": "Key of the parameter",
                        "type": "string"
                    },
                    "value": {
                        "description": "Value for the key",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Course": {
                "title": "Course",
                "description": "Course",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the course",
                        "type": "string"
                    },
                    "teacherId": {
                        "description": "Id of the teacher",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Degree": {
                "title": "Degree",
                "description": "Degree",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the degree",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Department": {
                "title": "Department",
                "description": "Department",
                "required": [
                    "name",
                    "number",
                    "abbreviation",
                    "facultyId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the department",
                        "type": "string"
                    },
                    "number": {
                        "description": "Number of the department",
                        "type": "integer"
                    },
                    "abbreviation": {
                        "description": "Abbreviation of the department",
                        "type": "string"
                    },
                    "facultyId": {
                        "description": "Faculty to which this department belongs",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Faculty": {
                "title": "Faculty",
                "description": "Faculty",
                "required": [
                    "name",
                    "number",
                    "abbreviation"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the faculty",
                        "type": "string"
                    },
                    "number": {
                        "description": "Number of the faculty",
                        "type": "integer"
                    },
                    "abbreviation": {
                        "description": "Abbreviation of the faculty",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "File": {
                "title": "File",
                "description": "File",
                "required": [
                    "name",
                    "userId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the file",
                        "type": "string"
                    },
                    "userId": {
                        "description": "User owner of this file",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Group": {
                "title": "Group",
                "description": "Group",
                "required": [
                    "name",
                    "specialityId"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the group",
                        "type": "string"
                    },
                    "specialityId": {
                        "description": "Speciality to which this group belongs",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Position": {
                "title": "Position",
                "description": "Position",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the position",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Role": {
                "title": "Role",
                "description": "Role",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the role",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Speciality": {
                "title": "Speciality",
                "description": "Speciality",
                "required": [
                    "name",
                    "number",
                    "abbreviation",
                    "department"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the speciality",
                        "type": "string"
                    },
                    "number": {
                        "description": "Number of the speciality",
                        "type": "integer"
                    },
                    "department_id": {
                        "description": "Department to which this speciality belongs",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Student": {
                "title": "Student",
                "description": "Student",
                "required": [
                    "userId",
                    "groupId"
                ],
                "properties": {
                    "userId": {
                        "description": "Id of the user",
                        "type": "string"
                    },
                    "groupId": {
                        "description": "Group to which this group belongs",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Teacher": {
                "title": "Teacher",
                "description": "Teacher",
                "required": [
                    "userId",
                    "departmentId"
                ],
                "properties": {
                    "userId": {
                        "description": "Id of the user",
                        "type": "string"
                    },
                    "departmentId": {
                        "description": "Department to which this group belongs",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Timetable": {
                "title": "Timetable",
                "description": "Timetable",
                "required": [
                    "courseId",
                    "gr"
                ],
                "properties": {
                    "courseId": {
                        "description": "Id of the course",
                        "type": "integer"
                    },
                    "day_of_week": {
                        "description": "Day of week",
                        "type": "integer"
                    },
                    "number": {
                        "description": "Number of course in the day",
                        "type": "integer"
                    },
                    "is_numerator": {
                        "description": "Is course only on numerator week",
                        "type": "boolean"
                    },
                    "group_id": {
                        "description": "Id of the group",
                        "type": "integer"
                    },
                    "audience_id": {
                        "description": "Id of the audience",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "User": {
                "title": "User",
                "description": "User",
                "required": [
                    "name",
                    "email",
                    "surname",
                    "patronymic",
                    "gender"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the file",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the user",
                        "type": "string"
                    },
                    "surname": {
                        "description": "Surname of the user",
                        "type": "string"
                    },
                    "patronymic": {
                        "description": "Patronymic of the user",
                        "type": "string"
                    },
                    "date_of_birth": {
                        "description": "Date of birth of the user",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password of the user",
                        "type": "string"
                    },
                    "mobile_phone": {
                        "description": "Mobile phone of the user",
                        "type": "string"
                    },
                    "work_phone": {
                        "description": "Work phone of the user",
                        "type": "string"
                    },
                    "gender": {
                        "description": "Gender of the user",
                        "type": "boolean"
                    },
                    "roleId": {
                        "description": "Role of the user",
                        "type": "integer"
                    },
                    "positionId": {
                        "description": "Position of the user",
                        "type": "integer"
                    },
                    "degreeId": {
                        "description": "Degree of the user",
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        }
    }
}